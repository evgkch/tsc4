{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

tuple empty_tuple() asm "NIL";

() recv_internal() {
}

{-
The main idea is to use matrices
Let Un+1 = [Fn+1, Fn] is a vector where Fn - n-th Fibonacci number;
So U0 = [1, 0] by defenition;
Let A = [[1, 1], [1, 0]] - operator
Then Un+1 = A^n U0

Proof (induction):
Un+1 = A * Un = A ^ 2 * Un-1 = ... = A ^ n * U0

Next write a matrix analog of exponentiation by squaring
-}
(int, int, int, int) mat_pow(int a, int b, int c, int d, int e) impure {

    if (e == 0) {
        return (1, 0, 0, 1);
    }

    if (e == 1) {
        return (a, b, c, d);
    }

    (int x, int y, int z, int w) = mat_pow(a, b, c, d, e >> 1);

    ;; gas economy
    int yz = y * z;
    int xw = x + w;

    (x, y, z, w) = (x * x + yz, y * xw, z * xw, w * w + yz);


    if ((e & 1) == 1) {
        (x, y, z, w) = (x * a + y * c, x * b + y * d, z * a + w * c, z * b + w * d);
    }

    return (x, y, z, w);
}

;; testable
(tuple) fibonacci_sequence(int n, int k) method_id {
  (int f', int f, _, _) = mat_pow(1, 1, 1, 0, n);

  int t = empty_tuple();
  t~push(f);
  if (k == 0) {
    return t;
  }
  t~push(f');
  if (k == 1) {
    return t;
  }
  else {
    int i = 2;
    while (i < k) {
        t~tpush(t.at(i - 2) + t.at(i - 1));
        i = i + 1;
    }
    return t;
  }
}

